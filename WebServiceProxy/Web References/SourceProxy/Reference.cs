//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace WebServiceProxy.SourceProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SourceSoap", Namespace="http://siglaz.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Error))]
    public partial class Source : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DiskInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SurfaceInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SurfaceInsertAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceThumbnailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceThumbnailFlatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceRawDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSourcePagingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHintDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHintDataOfDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurfaceByDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceOfDiskPagingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalRow_SurfaceOfDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalRow_SourceOfDiskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceThumbnail1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceThumbnailFlat1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceRawData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSourcePaging1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHintData1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHintDataOfDisk1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSurfaceByDisk1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceOfDiskPaging1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalRow_SurfaceOfDisk1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalRow_SourceOfDisk1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Source() {
            this.Url = "http://localhost/DDAWebService/Source.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DiskInsertCompletedEventHandler DiskInsertCompleted;
        
        /// <remarks/>
        public event SurfaceInsertCompletedEventHandler SurfaceInsertCompleted;
        
        /// <remarks/>
        public event SurfaceInsertAllCompletedEventHandler SurfaceInsertAllCompleted;
        
        /// <remarks/>
        public event GetSourceThumbnailCompletedEventHandler GetSourceThumbnailCompleted;
        
        /// <remarks/>
        public event GetSourceThumbnailFlatCompletedEventHandler GetSourceThumbnailFlatCompleted;
        
        /// <remarks/>
        public event GetSourceRawDataCompletedEventHandler GetSourceRawDataCompleted;
        
        /// <remarks/>
        public event GetDataSourcePagingCompletedEventHandler GetDataSourcePagingCompleted;
        
        /// <remarks/>
        public event GetHintDataCompletedEventHandler GetHintDataCompleted;
        
        /// <remarks/>
        public event GetHintDataOfDiskCompletedEventHandler GetHintDataOfDiskCompleted;
        
        /// <remarks/>
        public event GetSurfaceByDiskCompletedEventHandler GetSurfaceByDiskCompleted;
        
        /// <remarks/>
        public event GetSourceOfDiskPagingCompletedEventHandler GetSourceOfDiskPagingCompleted;
        
        /// <remarks/>
        public event GetTotalRow_SurfaceOfDiskCompletedEventHandler GetTotalRow_SurfaceOfDiskCompleted;
        
        /// <remarks/>
        public event GetTotalRow_SourceOfDiskCompletedEventHandler GetTotalRow_SourceOfDiskCompleted;
        
        /// <remarks/>
        public event GetSourceThumbnail1CompletedEventHandler GetSourceThumbnail1Completed;
        
        /// <remarks/>
        public event GetSourceThumbnailFlat1CompletedEventHandler GetSourceThumbnailFlat1Completed;
        
        /// <remarks/>
        public event GetSourceRawData1CompletedEventHandler GetSourceRawData1Completed;
        
        /// <remarks/>
        public event GetDataSourcePaging1CompletedEventHandler GetDataSourcePaging1Completed;
        
        /// <remarks/>
        public event GetHintData1CompletedEventHandler GetHintData1Completed;
        
        /// <remarks/>
        public event GetHintDataOfDisk1CompletedEventHandler GetHintDataOfDisk1Completed;
        
        /// <remarks/>
        public event GetSurfaceByDisk1CompletedEventHandler GetSurfaceByDisk1Completed;
        
        /// <remarks/>
        public event GetSourceOfDiskPaging1CompletedEventHandler GetSourceOfDiskPaging1Completed;
        
        /// <remarks/>
        public event GetTotalRow_SurfaceOfDisk1CompletedEventHandler GetTotalRow_SurfaceOfDisk1Completed;
        
        /// <remarks/>
        public event GetTotalRow_SourceOfDisk1CompletedEventHandler GetTotalRow_SourceOfDisk1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/DiskInsert", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DiskInsert(Disk disk) {
            object[] results = this.Invoke("DiskInsert", new object[] {
                        disk});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDiskInsert(Disk disk, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DiskInsert", new object[] {
                        disk}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndDiskInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DiskInsertAsync(Disk disk) {
            this.DiskInsertAsync(disk, null);
        }
        
        /// <remarks/>
        public void DiskInsertAsync(Disk disk, object userState) {
            if ((this.DiskInsertOperationCompleted == null)) {
                this.DiskInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiskInsertOperationCompleted);
            }
            this.InvokeAsync("DiskInsert", new object[] {
                        disk}, this.DiskInsertOperationCompleted, userState);
        }
        
        private void OnDiskInsertOperationCompleted(object arg) {
            if ((this.DiskInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiskInsertCompleted(this, new DiskInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/SurfaceInsert", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SurfaceInsert(Disk disk, Surface surface) {
            object[] results = this.Invoke("SurfaceInsert", new object[] {
                        disk,
                        surface});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSurfaceInsert(Disk disk, Surface surface, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SurfaceInsert", new object[] {
                        disk,
                        surface}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndSurfaceInsert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SurfaceInsertAsync(Disk disk, Surface surface) {
            this.SurfaceInsertAsync(disk, surface, null);
        }
        
        /// <remarks/>
        public void SurfaceInsertAsync(Disk disk, Surface surface, object userState) {
            if ((this.SurfaceInsertOperationCompleted == null)) {
                this.SurfaceInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSurfaceInsertOperationCompleted);
            }
            this.InvokeAsync("SurfaceInsert", new object[] {
                        disk,
                        surface}, this.SurfaceInsertOperationCompleted, userState);
        }
        
        private void OnSurfaceInsertOperationCompleted(object arg) {
            if ((this.SurfaceInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SurfaceInsertCompleted(this, new SurfaceInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/SurfaceInsertAll", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SurfaceInsertAll(Fab fab, Disk disk, Surface surface) {
            object[] results = this.Invoke("SurfaceInsertAll", new object[] {
                        fab,
                        disk,
                        surface});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSurfaceInsertAll(Fab fab, Disk disk, Surface surface, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SurfaceInsertAll", new object[] {
                        fab,
                        disk,
                        surface}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndSurfaceInsertAll(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SurfaceInsertAllAsync(Fab fab, Disk disk, Surface surface) {
            this.SurfaceInsertAllAsync(fab, disk, surface, null);
        }
        
        /// <remarks/>
        public void SurfaceInsertAllAsync(Fab fab, Disk disk, Surface surface, object userState) {
            if ((this.SurfaceInsertAllOperationCompleted == null)) {
                this.SurfaceInsertAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSurfaceInsertAllOperationCompleted);
            }
            this.InvokeAsync("SurfaceInsertAll", new object[] {
                        fab,
                        disk,
                        surface}, this.SurfaceInsertAllOperationCompleted, userState);
        }
        
        private void OnSurfaceInsertAllOperationCompleted(object arg) {
            if ((this.SurfaceInsertAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SurfaceInsertAllCompleted(this, new SurfaceInsertAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceThumbnail_DDADB", RequestElementName="GetSourceThumbnail_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceThumbnail_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceThumbnail_DDADBResult", DataType="base64Binary")]
        public byte[] GetSourceThumbnail(long surfaceKey) {
            object[] results = this.Invoke("GetSourceThumbnail", new object[] {
                        surfaceKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceThumbnail(long surfaceKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceThumbnail", new object[] {
                        surfaceKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetSourceThumbnail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceThumbnailAsync(long surfaceKey) {
            this.GetSourceThumbnailAsync(surfaceKey, null);
        }
        
        /// <remarks/>
        public void GetSourceThumbnailAsync(long surfaceKey, object userState) {
            if ((this.GetSourceThumbnailOperationCompleted == null)) {
                this.GetSourceThumbnailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceThumbnailOperationCompleted);
            }
            this.InvokeAsync("GetSourceThumbnail", new object[] {
                        surfaceKey}, this.GetSourceThumbnailOperationCompleted, userState);
        }
        
        private void OnGetSourceThumbnailOperationCompleted(object arg) {
            if ((this.GetSourceThumbnailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceThumbnailCompleted(this, new GetSourceThumbnailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceThumbnailFlat_DDADB", RequestElementName="GetSourceThumbnailFlat_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceThumbnailFlat_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceThumbnailFlat_DDADBResult", DataType="base64Binary")]
        public byte[] GetSourceThumbnailFlat(long surfaceKey) {
            object[] results = this.Invoke("GetSourceThumbnailFlat", new object[] {
                        surfaceKey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceThumbnailFlat(long surfaceKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceThumbnailFlat", new object[] {
                        surfaceKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetSourceThumbnailFlat(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceThumbnailFlatAsync(long surfaceKey) {
            this.GetSourceThumbnailFlatAsync(surfaceKey, null);
        }
        
        /// <remarks/>
        public void GetSourceThumbnailFlatAsync(long surfaceKey, object userState) {
            if ((this.GetSourceThumbnailFlatOperationCompleted == null)) {
                this.GetSourceThumbnailFlatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceThumbnailFlatOperationCompleted);
            }
            this.InvokeAsync("GetSourceThumbnailFlat", new object[] {
                        surfaceKey}, this.GetSourceThumbnailFlatOperationCompleted, userState);
        }
        
        private void OnGetSourceThumbnailFlatOperationCompleted(object arg) {
            if ((this.GetSourceThumbnailFlatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceThumbnailFlatCompleted(this, new GetSourceThumbnailFlatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceRawData_DDADB", RequestElementName="GetSourceRawData_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceRawData_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceRawData_DDADBResult")]
        public System.Data.DataSet GetSourceRawData(long surfaceKey) {
            object[] results = this.Invoke("GetSourceRawData", new object[] {
                        surfaceKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceRawData(long surfaceKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceRawData", new object[] {
                        surfaceKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSourceRawData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceRawDataAsync(long surfaceKey) {
            this.GetSourceRawDataAsync(surfaceKey, null);
        }
        
        /// <remarks/>
        public void GetSourceRawDataAsync(long surfaceKey, object userState) {
            if ((this.GetSourceRawDataOperationCompleted == null)) {
                this.GetSourceRawDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceRawDataOperationCompleted);
            }
            this.InvokeAsync("GetSourceRawData", new object[] {
                        surfaceKey}, this.GetSourceRawDataOperationCompleted, userState);
        }
        
        private void OnGetSourceRawDataOperationCompleted(object arg) {
            if ((this.GetSourceRawDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceRawDataCompleted(this, new GetSourceRawDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetDataSourcePaging_DDADB", RequestElementName="GetDataSourcePaging_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetDataSourcePaging_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDataSourcePaging_DDADBResult")]
        public DataSetResult GetDataSourcePaging(DataSourceRecipe recipe) {
            object[] results = this.Invoke("GetDataSourcePaging", new object[] {
                        recipe});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourcePaging(DataSourceRecipe recipe, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourcePaging", new object[] {
                        recipe}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetDataSourcePaging(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourcePagingAsync(DataSourceRecipe recipe) {
            this.GetDataSourcePagingAsync(recipe, null);
        }
        
        /// <remarks/>
        public void GetDataSourcePagingAsync(DataSourceRecipe recipe, object userState) {
            if ((this.GetDataSourcePagingOperationCompleted == null)) {
                this.GetDataSourcePagingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourcePagingOperationCompleted);
            }
            this.InvokeAsync("GetDataSourcePaging", new object[] {
                        recipe}, this.GetDataSourcePagingOperationCompleted, userState);
        }
        
        private void OnGetDataSourcePagingOperationCompleted(object arg) {
            if ((this.GetDataSourcePagingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourcePagingCompleted(this, new GetDataSourcePagingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetHintData_DDADB", RequestElementName="GetHintData_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetHintData_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetHintData_DDADBResult")]
        public DataSetResult GetHintData(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter) {
            object[] results = this.Invoke("GetHintData", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHintData(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHintData", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetHintData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintDataAsync(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter) {
            this.GetHintDataAsync(fabID, fieldName, from, to, filter, null);
        }
        
        /// <remarks/>
        public void GetHintDataAsync(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, object userState) {
            if ((this.GetHintDataOperationCompleted == null)) {
                this.GetHintDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintDataOperationCompleted);
            }
            this.InvokeAsync("GetHintData", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter}, this.GetHintDataOperationCompleted, userState);
        }
        
        private void OnGetHintDataOperationCompleted(object arg) {
            if ((this.GetHintDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintDataCompleted(this, new GetHintDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetHintDataOfDisk_DDADB", RequestElementName="GetHintDataOfDisk_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetHintDataOfDisk_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetHintDataOfDisk_DDADBResult")]
        public DataSetResult GetHintDataOfDisk(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter) {
            object[] results = this.Invoke("GetHintDataOfDisk", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHintDataOfDisk(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHintDataOfDisk", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetHintDataOfDisk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintDataOfDiskAsync(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter) {
            this.GetHintDataOfDiskAsync(fabID, fieldName, from, to, filter, null);
        }
        
        /// <remarks/>
        public void GetHintDataOfDiskAsync(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, object userState) {
            if ((this.GetHintDataOfDiskOperationCompleted == null)) {
                this.GetHintDataOfDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintDataOfDiskOperationCompleted);
            }
            this.InvokeAsync("GetHintDataOfDisk", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter}, this.GetHintDataOfDiskOperationCompleted, userState);
        }
        
        private void OnGetHintDataOfDiskOperationCompleted(object arg) {
            if ((this.GetHintDataOfDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintDataOfDiskCompleted(this, new GetHintDataOfDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSurfaceByDisk_DDADB", RequestElementName="GetSurfaceByDisk_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetSurfaceByDisk_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSurfaceByDisk_DDADBResult")]
        public DataSetResult GetSurfaceByDisk(long diskKey) {
            object[] results = this.Invoke("GetSurfaceByDisk", new object[] {
                        diskKey});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSurfaceByDisk(long diskKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSurfaceByDisk", new object[] {
                        diskKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetSurfaceByDisk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurfaceByDiskAsync(long diskKey) {
            this.GetSurfaceByDiskAsync(diskKey, null);
        }
        
        /// <remarks/>
        public void GetSurfaceByDiskAsync(long diskKey, object userState) {
            if ((this.GetSurfaceByDiskOperationCompleted == null)) {
                this.GetSurfaceByDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurfaceByDiskOperationCompleted);
            }
            this.InvokeAsync("GetSurfaceByDisk", new object[] {
                        diskKey}, this.GetSurfaceByDiskOperationCompleted, userState);
        }
        
        private void OnGetSurfaceByDiskOperationCompleted(object arg) {
            if ((this.GetSurfaceByDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurfaceByDiskCompleted(this, new GetSurfaceByDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceOfDiskPaging_DDADB", RequestElementName="GetSourceOfDiskPaging_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceOfDiskPaging_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceOfDiskPaging_DDADBResult")]
        public DataSetResult GetSourceOfDiskPaging(DataSourceRecipe recipe) {
            object[] results = this.Invoke("GetSourceOfDiskPaging", new object[] {
                        recipe});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceOfDiskPaging(DataSourceRecipe recipe, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceOfDiskPaging", new object[] {
                        recipe}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetSourceOfDiskPaging(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceOfDiskPagingAsync(DataSourceRecipe recipe) {
            this.GetSourceOfDiskPagingAsync(recipe, null);
        }
        
        /// <remarks/>
        public void GetSourceOfDiskPagingAsync(DataSourceRecipe recipe, object userState) {
            if ((this.GetSourceOfDiskPagingOperationCompleted == null)) {
                this.GetSourceOfDiskPagingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceOfDiskPagingOperationCompleted);
            }
            this.InvokeAsync("GetSourceOfDiskPaging", new object[] {
                        recipe}, this.GetSourceOfDiskPagingOperationCompleted, userState);
        }
        
        private void OnGetSourceOfDiskPagingOperationCompleted(object arg) {
            if ((this.GetSourceOfDiskPagingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceOfDiskPagingCompleted(this, new GetSourceOfDiskPagingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetTotalRow_SurfaceOfDisk_DDADB", RequestElementName="GetTotalRow_SurfaceOfDisk_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetTotalRow_SurfaceOfDisk_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetTotalRow_SurfaceOfDisk_DDADBResult")]
        public ResultBase GetTotalRow_SurfaceOfDisk(string sqlWhere) {
            object[] results = this.Invoke("GetTotalRow_SurfaceOfDisk", new object[] {
                        sqlWhere});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTotalRow_SurfaceOfDisk(string sqlWhere, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTotalRow_SurfaceOfDisk", new object[] {
                        sqlWhere}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndGetTotalRow_SurfaceOfDisk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalRow_SurfaceOfDiskAsync(string sqlWhere) {
            this.GetTotalRow_SurfaceOfDiskAsync(sqlWhere, null);
        }
        
        /// <remarks/>
        public void GetTotalRow_SurfaceOfDiskAsync(string sqlWhere, object userState) {
            if ((this.GetTotalRow_SurfaceOfDiskOperationCompleted == null)) {
                this.GetTotalRow_SurfaceOfDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalRow_SurfaceOfDiskOperationCompleted);
            }
            this.InvokeAsync("GetTotalRow_SurfaceOfDisk", new object[] {
                        sqlWhere}, this.GetTotalRow_SurfaceOfDiskOperationCompleted, userState);
        }
        
        private void OnGetTotalRow_SurfaceOfDiskOperationCompleted(object arg) {
            if ((this.GetTotalRow_SurfaceOfDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalRow_SurfaceOfDiskCompleted(this, new GetTotalRow_SurfaceOfDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetTotalRow_SourceOfDisk_DDADB", RequestElementName="GetTotalRow_SourceOfDisk_DDADB", RequestNamespace="http://siglaz.com", ResponseElementName="GetTotalRow_SourceOfDisk_DDADBResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetTotalRow_SourceOfDisk_DDADBResult")]
        public ResultBase GetTotalRow_SourceOfDisk(string sqlWhere) {
            object[] results = this.Invoke("GetTotalRow_SourceOfDisk", new object[] {
                        sqlWhere});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTotalRow_SourceOfDisk(string sqlWhere, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTotalRow_SourceOfDisk", new object[] {
                        sqlWhere}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndGetTotalRow_SourceOfDisk(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalRow_SourceOfDiskAsync(string sqlWhere) {
            this.GetTotalRow_SourceOfDiskAsync(sqlWhere, null);
        }
        
        /// <remarks/>
        public void GetTotalRow_SourceOfDiskAsync(string sqlWhere, object userState) {
            if ((this.GetTotalRow_SourceOfDiskOperationCompleted == null)) {
                this.GetTotalRow_SourceOfDiskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalRow_SourceOfDiskOperationCompleted);
            }
            this.InvokeAsync("GetTotalRow_SourceOfDisk", new object[] {
                        sqlWhere}, this.GetTotalRow_SourceOfDiskOperationCompleted, userState);
        }
        
        private void OnGetTotalRow_SourceOfDiskOperationCompleted(object arg) {
            if ((this.GetTotalRow_SourceOfDiskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalRow_SourceOfDiskCompleted(this, new GetTotalRow_SourceOfDiskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetSourceThumbnail1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceThumbnail_DDAStagingArea", RequestElementName="GetSourceThumbnail_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceThumbnail_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceThumbnail_DDAStagingAreaResult", DataType="base64Binary")]
        public byte[] GetSourceThumbnail(long surfaceKey, DDADBType type) {
            object[] results = this.Invoke("GetSourceThumbnail1", new object[] {
                        surfaceKey,
                        type});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceThumbnail1(long surfaceKey, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceThumbnail1", new object[] {
                        surfaceKey,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetSourceThumbnail1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceThumbnail1Async(long surfaceKey, DDADBType type) {
            this.GetSourceThumbnail1Async(surfaceKey, type, null);
        }
        
        /// <remarks/>
        public void GetSourceThumbnail1Async(long surfaceKey, DDADBType type, object userState) {
            if ((this.GetSourceThumbnail1OperationCompleted == null)) {
                this.GetSourceThumbnail1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceThumbnail1OperationCompleted);
            }
            this.InvokeAsync("GetSourceThumbnail1", new object[] {
                        surfaceKey,
                        type}, this.GetSourceThumbnail1OperationCompleted, userState);
        }
        
        private void OnGetSourceThumbnail1OperationCompleted(object arg) {
            if ((this.GetSourceThumbnail1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceThumbnail1Completed(this, new GetSourceThumbnail1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetSourceThumbnailFlat1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceThumbnailFlat_DDAStagingArea", RequestElementName="GetSourceThumbnailFlat_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceThumbnailFlat_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceThumbnailFlat_DDAStagingAreaResult", DataType="base64Binary")]
        public byte[] GetSourceThumbnailFlat(long surfaceKey, DDADBType type) {
            object[] results = this.Invoke("GetSourceThumbnailFlat1", new object[] {
                        surfaceKey,
                        type});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceThumbnailFlat1(long surfaceKey, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceThumbnailFlat1", new object[] {
                        surfaceKey,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetSourceThumbnailFlat1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceThumbnailFlat1Async(long surfaceKey, DDADBType type) {
            this.GetSourceThumbnailFlat1Async(surfaceKey, type, null);
        }
        
        /// <remarks/>
        public void GetSourceThumbnailFlat1Async(long surfaceKey, DDADBType type, object userState) {
            if ((this.GetSourceThumbnailFlat1OperationCompleted == null)) {
                this.GetSourceThumbnailFlat1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceThumbnailFlat1OperationCompleted);
            }
            this.InvokeAsync("GetSourceThumbnailFlat1", new object[] {
                        surfaceKey,
                        type}, this.GetSourceThumbnailFlat1OperationCompleted, userState);
        }
        
        private void OnGetSourceThumbnailFlat1OperationCompleted(object arg) {
            if ((this.GetSourceThumbnailFlat1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceThumbnailFlat1Completed(this, new GetSourceThumbnailFlat1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetSourceRawData1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceRawData_DDAStagingArea", RequestElementName="GetSourceRawData_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceRawData_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceRawData_DDAStagingAreaResult")]
        public System.Data.DataSet GetSourceRawData(long surfaceKey, DDADBType type) {
            object[] results = this.Invoke("GetSourceRawData1", new object[] {
                        surfaceKey,
                        type});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceRawData1(long surfaceKey, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceRawData1", new object[] {
                        surfaceKey,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetSourceRawData1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceRawData1Async(long surfaceKey, DDADBType type) {
            this.GetSourceRawData1Async(surfaceKey, type, null);
        }
        
        /// <remarks/>
        public void GetSourceRawData1Async(long surfaceKey, DDADBType type, object userState) {
            if ((this.GetSourceRawData1OperationCompleted == null)) {
                this.GetSourceRawData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceRawData1OperationCompleted);
            }
            this.InvokeAsync("GetSourceRawData1", new object[] {
                        surfaceKey,
                        type}, this.GetSourceRawData1OperationCompleted, userState);
        }
        
        private void OnGetSourceRawData1OperationCompleted(object arg) {
            if ((this.GetSourceRawData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceRawData1Completed(this, new GetSourceRawData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetDataSourcePaging1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetDataSourcePaging_DDAStagingArea", RequestElementName="GetDataSourcePaging_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetDataSourcePaging_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetDataSourcePaging_DDAStagingAreaResult")]
        public DataSetResult GetDataSourcePaging(DataSourceRecipe recipe, DDADBType type) {
            object[] results = this.Invoke("GetDataSourcePaging1", new object[] {
                        recipe,
                        type});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourcePaging1(DataSourceRecipe recipe, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourcePaging1", new object[] {
                        recipe,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetDataSourcePaging1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourcePaging1Async(DataSourceRecipe recipe, DDADBType type) {
            this.GetDataSourcePaging1Async(recipe, type, null);
        }
        
        /// <remarks/>
        public void GetDataSourcePaging1Async(DataSourceRecipe recipe, DDADBType type, object userState) {
            if ((this.GetDataSourcePaging1OperationCompleted == null)) {
                this.GetDataSourcePaging1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourcePaging1OperationCompleted);
            }
            this.InvokeAsync("GetDataSourcePaging1", new object[] {
                        recipe,
                        type}, this.GetDataSourcePaging1OperationCompleted, userState);
        }
        
        private void OnGetDataSourcePaging1OperationCompleted(object arg) {
            if ((this.GetDataSourcePaging1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourcePaging1Completed(this, new GetDataSourcePaging1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetHintData1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetHintData_DDAStagingArea", RequestElementName="GetHintData_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetHintData_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetHintData_DDAStagingAreaResult")]
        public DataSetResult GetHintData(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type) {
            object[] results = this.Invoke("GetHintData1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHintData1(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHintData1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetHintData1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintData1Async(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type) {
            this.GetHintData1Async(fabID, fieldName, from, to, filter, type, null);
        }
        
        /// <remarks/>
        public void GetHintData1Async(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type, object userState) {
            if ((this.GetHintData1OperationCompleted == null)) {
                this.GetHintData1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintData1OperationCompleted);
            }
            this.InvokeAsync("GetHintData1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type}, this.GetHintData1OperationCompleted, userState);
        }
        
        private void OnGetHintData1OperationCompleted(object arg) {
            if ((this.GetHintData1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintData1Completed(this, new GetHintData1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetHintDataOfDisk1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetHintDataOfDisk_DDAStagingArea", RequestElementName="GetHintDataOfDisk_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetHintDataOfDisk_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetHintDataOfDisk_DDAStagingAreaResult")]
        public DataSetResult GetHintDataOfDisk(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type) {
            object[] results = this.Invoke("GetHintDataOfDisk1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHintDataOfDisk1(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHintDataOfDisk1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetHintDataOfDisk1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintDataOfDisk1Async(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type) {
            this.GetHintDataOfDisk1Async(fabID, fieldName, from, to, filter, type, null);
        }
        
        /// <remarks/>
        public void GetHintDataOfDisk1Async(string fabID, string fieldName, System.DateTime from, System.DateTime to, string filter, DDADBType type, object userState) {
            if ((this.GetHintDataOfDisk1OperationCompleted == null)) {
                this.GetHintDataOfDisk1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintDataOfDisk1OperationCompleted);
            }
            this.InvokeAsync("GetHintDataOfDisk1", new object[] {
                        fabID,
                        fieldName,
                        from,
                        to,
                        filter,
                        type}, this.GetHintDataOfDisk1OperationCompleted, userState);
        }
        
        private void OnGetHintDataOfDisk1OperationCompleted(object arg) {
            if ((this.GetHintDataOfDisk1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintDataOfDisk1Completed(this, new GetHintDataOfDisk1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetSurfaceByDisk1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSurfaceByDisk_DDAStagingArea", RequestElementName="GetSurfaceByDisk_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetSurfaceByDisk_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSurfaceByDisk_DDAStagingAreaResult")]
        public DataSetResult GetSurfaceByDisk(long diskKey, DDADBType type) {
            object[] results = this.Invoke("GetSurfaceByDisk1", new object[] {
                        diskKey,
                        type});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSurfaceByDisk1(long diskKey, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSurfaceByDisk1", new object[] {
                        diskKey,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetSurfaceByDisk1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetSurfaceByDisk1Async(long diskKey, DDADBType type) {
            this.GetSurfaceByDisk1Async(diskKey, type, null);
        }
        
        /// <remarks/>
        public void GetSurfaceByDisk1Async(long diskKey, DDADBType type, object userState) {
            if ((this.GetSurfaceByDisk1OperationCompleted == null)) {
                this.GetSurfaceByDisk1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSurfaceByDisk1OperationCompleted);
            }
            this.InvokeAsync("GetSurfaceByDisk1", new object[] {
                        diskKey,
                        type}, this.GetSurfaceByDisk1OperationCompleted, userState);
        }
        
        private void OnGetSurfaceByDisk1OperationCompleted(object arg) {
            if ((this.GetSurfaceByDisk1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSurfaceByDisk1Completed(this, new GetSurfaceByDisk1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetSourceOfDiskPaging1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetSourceOfDiskPaging_DDAStagingArea", RequestElementName="GetSourceOfDiskPaging_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetSourceOfDiskPaging_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSourceOfDiskPaging_DDAStagingAreaResult")]
        public DataSetResult GetSourceOfDiskPaging(DataSourceRecipe recipe, DDADBType type) {
            object[] results = this.Invoke("GetSourceOfDiskPaging1", new object[] {
                        recipe,
                        type});
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSourceOfDiskPaging1(DataSourceRecipe recipe, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSourceOfDiskPaging1", new object[] {
                        recipe,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSetResult EndGetSourceOfDiskPaging1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSetResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceOfDiskPaging1Async(DataSourceRecipe recipe, DDADBType type) {
            this.GetSourceOfDiskPaging1Async(recipe, type, null);
        }
        
        /// <remarks/>
        public void GetSourceOfDiskPaging1Async(DataSourceRecipe recipe, DDADBType type, object userState) {
            if ((this.GetSourceOfDiskPaging1OperationCompleted == null)) {
                this.GetSourceOfDiskPaging1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceOfDiskPaging1OperationCompleted);
            }
            this.InvokeAsync("GetSourceOfDiskPaging1", new object[] {
                        recipe,
                        type}, this.GetSourceOfDiskPaging1OperationCompleted, userState);
        }
        
        private void OnGetSourceOfDiskPaging1OperationCompleted(object arg) {
            if ((this.GetSourceOfDiskPaging1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceOfDiskPaging1Completed(this, new GetSourceOfDiskPaging1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetTotalRow_SurfaceOfDisk1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetTotalRow_SurfaceOfDisk_DDAStagingArea", RequestElementName="GetTotalRow_SurfaceOfDisk_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetTotalRow_SurfaceOfDisk_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetTotalRow_SurfaceOfDisk_DDAStagingAreaResult")]
        public ResultBase GetTotalRow_SurfaceOfDisk(string sqlWhere, DDADBType type) {
            object[] results = this.Invoke("GetTotalRow_SurfaceOfDisk1", new object[] {
                        sqlWhere,
                        type});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTotalRow_SurfaceOfDisk1(string sqlWhere, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTotalRow_SurfaceOfDisk1", new object[] {
                        sqlWhere,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndGetTotalRow_SurfaceOfDisk1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalRow_SurfaceOfDisk1Async(string sqlWhere, DDADBType type) {
            this.GetTotalRow_SurfaceOfDisk1Async(sqlWhere, type, null);
        }
        
        /// <remarks/>
        public void GetTotalRow_SurfaceOfDisk1Async(string sqlWhere, DDADBType type, object userState) {
            if ((this.GetTotalRow_SurfaceOfDisk1OperationCompleted == null)) {
                this.GetTotalRow_SurfaceOfDisk1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalRow_SurfaceOfDisk1OperationCompleted);
            }
            this.InvokeAsync("GetTotalRow_SurfaceOfDisk1", new object[] {
                        sqlWhere,
                        type}, this.GetTotalRow_SurfaceOfDisk1OperationCompleted, userState);
        }
        
        private void OnGetTotalRow_SurfaceOfDisk1OperationCompleted(object arg) {
            if ((this.GetTotalRow_SurfaceOfDisk1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalRow_SurfaceOfDisk1Completed(this, new GetTotalRow_SurfaceOfDisk1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="GetTotalRow_SourceOfDisk1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetTotalRow_SourceOfDisk_DDAStagingArea", RequestElementName="GetTotalRow_SourceOfDisk_DDAStagingArea", RequestNamespace="http://siglaz.com", ResponseElementName="GetTotalRow_SourceOfDisk_DDAStagingAreaResponse", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetTotalRow_SourceOfDisk_DDAStagingAreaResult")]
        public ResultBase GetTotalRow_SourceOfDisk(string sqlWhere, DDADBType type) {
            object[] results = this.Invoke("GetTotalRow_SourceOfDisk1", new object[] {
                        sqlWhere,
                        type});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTotalRow_SourceOfDisk1(string sqlWhere, DDADBType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTotalRow_SourceOfDisk1", new object[] {
                        sqlWhere,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndGetTotalRow_SourceOfDisk1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalRow_SourceOfDisk1Async(string sqlWhere, DDADBType type) {
            this.GetTotalRow_SourceOfDisk1Async(sqlWhere, type, null);
        }
        
        /// <remarks/>
        public void GetTotalRow_SourceOfDisk1Async(string sqlWhere, DDADBType type, object userState) {
            if ((this.GetTotalRow_SourceOfDisk1OperationCompleted == null)) {
                this.GetTotalRow_SourceOfDisk1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalRow_SourceOfDisk1OperationCompleted);
            }
            this.InvokeAsync("GetTotalRow_SourceOfDisk1", new object[] {
                        sqlWhere,
                        type}, this.GetTotalRow_SourceOfDisk1OperationCompleted, userState);
        }
        
        private void OnGetTotalRow_SourceOfDisk1OperationCompleted(object arg) {
            if ((this.GetTotalRow_SourceOfDisk1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalRow_SourceOfDisk1Completed(this, new GetTotalRow_SourceOfDisk1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class Disk {
        
        private string fabIDField;
        
        private short fabKeyField;
        
        private string testerTypeField;
        
        private short testerTypeIdField;
        
        private long diskKeyField;
        
        private string diskIDField;
        
        private string binNumField;
        
        private string testGradeField;
        
        private short slotNumField;
        
        private string lotIDField;
        
        private string lotIDCodeField;
        
        private string cassetteIDField;
        
        private string stationField;
        
        private int stationKeyField;
        
        private string wordCellField;
        
        private int wordCellKeyField;
        
        private bool diskSizeContainDiameterField;
        
        private double innerDiameterField;
        
        private double outerDiameterField;
        
        private string productCodeField;
        
        private int productKeyField;
        
        private int l2_Top_Corr_ctsField;
        
        private int l2_Bot_Corr_ctsField;
        
        private int l2_Top_NCorr_ctsField;
        
        private int l2_Bot_NCorr_ctsField;
        
        private System.DateTime testDiskDateField;
        
        private string fileNameField;
        
        /// <remarks/>
        public string FabID {
            get {
                return this.fabIDField;
            }
            set {
                this.fabIDField = value;
            }
        }
        
        /// <remarks/>
        public short FabKey {
            get {
                return this.fabKeyField;
            }
            set {
                this.fabKeyField = value;
            }
        }
        
        /// <remarks/>
        public string TesterType {
            get {
                return this.testerTypeField;
            }
            set {
                this.testerTypeField = value;
            }
        }
        
        /// <remarks/>
        public short TesterTypeId {
            get {
                return this.testerTypeIdField;
            }
            set {
                this.testerTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public long DiskKey {
            get {
                return this.diskKeyField;
            }
            set {
                this.diskKeyField = value;
            }
        }
        
        /// <remarks/>
        public string DiskID {
            get {
                return this.diskIDField;
            }
            set {
                this.diskIDField = value;
            }
        }
        
        /// <remarks/>
        public string BinNum {
            get {
                return this.binNumField;
            }
            set {
                this.binNumField = value;
            }
        }
        
        /// <remarks/>
        public string TestGrade {
            get {
                return this.testGradeField;
            }
            set {
                this.testGradeField = value;
            }
        }
        
        /// <remarks/>
        public short SlotNum {
            get {
                return this.slotNumField;
            }
            set {
                this.slotNumField = value;
            }
        }
        
        /// <remarks/>
        public string LotID {
            get {
                return this.lotIDField;
            }
            set {
                this.lotIDField = value;
            }
        }
        
        /// <remarks/>
        public string LotIDCode {
            get {
                return this.lotIDCodeField;
            }
            set {
                this.lotIDCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CassetteID {
            get {
                return this.cassetteIDField;
            }
            set {
                this.cassetteIDField = value;
            }
        }
        
        /// <remarks/>
        public string Station {
            get {
                return this.stationField;
            }
            set {
                this.stationField = value;
            }
        }
        
        /// <remarks/>
        public int StationKey {
            get {
                return this.stationKeyField;
            }
            set {
                this.stationKeyField = value;
            }
        }
        
        /// <remarks/>
        public string WordCell {
            get {
                return this.wordCellField;
            }
            set {
                this.wordCellField = value;
            }
        }
        
        /// <remarks/>
        public int WordCellKey {
            get {
                return this.wordCellKeyField;
            }
            set {
                this.wordCellKeyField = value;
            }
        }
        
        /// <remarks/>
        public bool DiskSizeContainDiameter {
            get {
                return this.diskSizeContainDiameterField;
            }
            set {
                this.diskSizeContainDiameterField = value;
            }
        }
        
        /// <remarks/>
        public double InnerDiameter {
            get {
                return this.innerDiameterField;
            }
            set {
                this.innerDiameterField = value;
            }
        }
        
        /// <remarks/>
        public double OuterDiameter {
            get {
                return this.outerDiameterField;
            }
            set {
                this.outerDiameterField = value;
            }
        }
        
        /// <remarks/>
        public string ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
        
        /// <remarks/>
        public int ProductKey {
            get {
                return this.productKeyField;
            }
            set {
                this.productKeyField = value;
            }
        }
        
        /// <remarks/>
        public int L2_Top_Corr_cts {
            get {
                return this.l2_Top_Corr_ctsField;
            }
            set {
                this.l2_Top_Corr_ctsField = value;
            }
        }
        
        /// <remarks/>
        public int L2_Bot_Corr_cts {
            get {
                return this.l2_Bot_Corr_ctsField;
            }
            set {
                this.l2_Bot_Corr_ctsField = value;
            }
        }
        
        /// <remarks/>
        public int L2_Top_NCorr_cts {
            get {
                return this.l2_Top_NCorr_ctsField;
            }
            set {
                this.l2_Top_NCorr_ctsField = value;
            }
        }
        
        /// <remarks/>
        public int L2_Bot_NCorr_cts {
            get {
                return this.l2_Bot_NCorr_ctsField;
            }
            set {
                this.l2_Bot_NCorr_ctsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TestDiskDate {
            get {
                return this.testDiskDateField;
            }
            set {
                this.testDiskDateField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSetResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class Error {
        
        private ErrorCode codeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public ErrorCode Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum ErrorCode {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        UNKNOWN_ERROR,
        
        /// <remarks/>
        NO_DATA,
        
        /// <remarks/>
        INVALID_SQL_STATEMENT,
        
        /// <remarks/>
        NO_AUTHORIZED,
        
        /// <remarks/>
        NO_DATA_TO_ANALYZE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class ResultBase : Error {
        
        private long id64Field;
        
        private int id32Field;
        
        private short id16Field;
        
        private string idstringField;
        
        /// <remarks/>
        public long id64 {
            get {
                return this.id64Field;
            }
            set {
                this.id64Field = value;
            }
        }
        
        /// <remarks/>
        public int id32 {
            get {
                return this.id32Field;
            }
            set {
                this.id32Field = value;
            }
        }
        
        /// <remarks/>
        public short id16 {
            get {
                return this.id16Field;
            }
            set {
                this.id16Field = value;
            }
        }
        
        /// <remarks/>
        public string idstring {
            get {
                return this.idstringField;
            }
            set {
                this.idstringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class DataSetResult : Error {
        
        private System.Data.DataSet resultField;
        
        private int totalRowField;
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRow {
            get {
                return this.totalRowField;
            }
            set {
                this.totalRowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class TableLayout {
        
        private int pageIndexField;
        
        private int pageSizeField;
        
        private string[] displayColumnsField;
        
        private string orderByField;
        
        /// <remarks/>
        public int PageIndex {
            get {
                return this.pageIndexField;
            }
            set {
                this.pageIndexField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public string[] DisplayColumns {
            get {
                return this.displayColumnsField;
            }
            set {
                this.displayColumnsField = value;
            }
        }
        
        /// <remarks/>
        public string OrderBy {
            get {
                return this.orderByField;
            }
            set {
                this.orderByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class QueryCondition {
        
        private string fabIdField;
        
        private ConditionType conditionTypeField;
        
        private string[] conditionListField;
        
        private bool isOrAndField;
        
        private bool isFilterField;
        
        /// <remarks/>
        public string FabId {
            get {
                return this.fabIdField;
            }
            set {
                this.fabIdField = value;
            }
        }
        
        /// <remarks/>
        public ConditionType ConditionType {
            get {
                return this.conditionTypeField;
            }
            set {
                this.conditionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ConditionList")]
        public string[] ConditionList {
            get {
                return this.conditionListField;
            }
            set {
                this.conditionListField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOrAnd {
            get {
                return this.isOrAndField;
            }
            set {
                this.isOrAndField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFilter {
            get {
                return this.isFilterField;
            }
            set {
                this.isFilterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum ConditionType {
        
        /// <remarks/>
        Basic,
        
        /// <remarks/>
        Advanced,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class TimeFilter {
        
        private TimeRangeType typeField;
        
        private System.DateTime fromField;
        
        private System.DateTime toField;
        
        private int nField;
        
        /// <remarks/>
        public TimeRangeType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime From {
            get {
                return this.fromField;
            }
            set {
                this.fromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime To {
            get {
                return this.toField;
            }
            set {
                this.toField = value;
            }
        }
        
        /// <remarks/>
        public int N {
            get {
                return this.nField;
            }
            set {
                this.nField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum TimeRangeType {
        
        /// <remarks/>
        LastOneHour,
        
        /// <remarks/>
        Last6Hours,
        
        /// <remarks/>
        Last12Hours,
        
        /// <remarks/>
        LastOneDay,
        
        /// <remarks/>
        LastOneWeek,
        
        /// <remarks/>
        Last2Weeks,
        
        /// <remarks/>
        Last3Weeks,
        
        /// <remarks/>
        LastOneMonth,
        
        /// <remarks/>
        FromDateToDate,
        
        /// <remarks/>
        LastNHours,
        
        /// <remarks/>
        LastNDays,
        
        /// <remarks/>
        LastNWeeks,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class DataSourceRecipe {
        
        private TimeFilter timeFilterField;
        
        private QueryCondition queryConditionField;
        
        private TableLayout tableLayoutField;
        
        private ViewSurface viewSurfaceField;
        
        private ViewType viewTypeField;
        
        private bool excludeDuplicateDiskField;
        
        /// <remarks/>
        public TimeFilter TimeFilter {
            get {
                return this.timeFilterField;
            }
            set {
                this.timeFilterField = value;
            }
        }
        
        /// <remarks/>
        public QueryCondition QueryCondition {
            get {
                return this.queryConditionField;
            }
            set {
                this.queryConditionField = value;
            }
        }
        
        /// <remarks/>
        public TableLayout TableLayout {
            get {
                return this.tableLayoutField;
            }
            set {
                this.tableLayoutField = value;
            }
        }
        
        /// <remarks/>
        public ViewSurface ViewSurface {
            get {
                return this.viewSurfaceField;
            }
            set {
                this.viewSurfaceField = value;
            }
        }
        
        /// <remarks/>
        public ViewType ViewType {
            get {
                return this.viewTypeField;
            }
            set {
                this.viewTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool ExcludeDuplicateDisk {
            get {
                return this.excludeDuplicateDiskField;
            }
            set {
                this.excludeDuplicateDiskField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum ViewSurface {
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        Top,
        
        /// <remarks/>
        Bottom,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum ViewType {
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        SourceWithSignature,
        
        /// <remarks/>
        SourceWithoutSignature,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class Fab {
        
        private string fabIDField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string FabID {
            get {
                return this.fabIDField;
            }
            set {
                this.fabIDField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class Surface {
        
        private long surfaceKeyField;
        
        private System.DateTime testDateField;
        
        private eSurface topBottomField;
        
        private int numberOfDefectField;
        
        private bool loadedField;
        
        private bool isDefectListField;
        
        private bool noCompressField;
        
        private byte[] rawDataField;
        
        private byte[] sourceThumbnailField;
        
        private byte[] sourceThumbnailFlatField;
        
        /// <remarks/>
        public long SurfaceKey {
            get {
                return this.surfaceKeyField;
            }
            set {
                this.surfaceKeyField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TestDate {
            get {
                return this.testDateField;
            }
            set {
                this.testDateField = value;
            }
        }
        
        /// <remarks/>
        public eSurface TopBottom {
            get {
                return this.topBottomField;
            }
            set {
                this.topBottomField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfDefect {
            get {
                return this.numberOfDefectField;
            }
            set {
                this.numberOfDefectField = value;
            }
        }
        
        /// <remarks/>
        public bool Loaded {
            get {
                return this.loadedField;
            }
            set {
                this.loadedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDefectList {
            get {
                return this.isDefectListField;
            }
            set {
                this.isDefectListField = value;
            }
        }
        
        /// <remarks/>
        public bool NoCompress {
            get {
                return this.noCompressField;
            }
            set {
                this.noCompressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RawData {
            get {
                return this.rawDataField;
            }
            set {
                this.rawDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SourceThumbnail {
            get {
                return this.sourceThumbnailField;
            }
            set {
                this.sourceThumbnailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SourceThumbnailFlat {
            get {
                return this.sourceThumbnailFlatField;
            }
            set {
                this.sourceThumbnailFlatField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum eSurface {
        
        /// <remarks/>
        Top,
        
        /// <remarks/>
        Bottom,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum DDADBType {
        
        /// <remarks/>
        DDADB,
        
        /// <remarks/>
        DDAStagingArea,
        
        /// <remarks/>
        DDAArchives,
        
        /// <remarks/>
        DDADataMarts,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DiskInsertCompletedEventHandler(object sender, DiskInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiskInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiskInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SurfaceInsertCompletedEventHandler(object sender, SurfaceInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SurfaceInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SurfaceInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SurfaceInsertAllCompletedEventHandler(object sender, SurfaceInsertAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SurfaceInsertAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SurfaceInsertAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceThumbnailCompletedEventHandler(object sender, GetSourceThumbnailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceThumbnailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceThumbnailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceThumbnailFlatCompletedEventHandler(object sender, GetSourceThumbnailFlatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceThumbnailFlatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceThumbnailFlatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceRawDataCompletedEventHandler(object sender, GetSourceRawDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceRawDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceRawDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDataSourcePagingCompletedEventHandler(object sender, GetDataSourcePagingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourcePagingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourcePagingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHintDataCompletedEventHandler(object sender, GetHintDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHintDataOfDiskCompletedEventHandler(object sender, GetHintDataOfDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintDataOfDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintDataOfDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSurfaceByDiskCompletedEventHandler(object sender, GetSurfaceByDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurfaceByDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurfaceByDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceOfDiskPagingCompletedEventHandler(object sender, GetSourceOfDiskPagingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceOfDiskPagingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceOfDiskPagingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTotalRow_SurfaceOfDiskCompletedEventHandler(object sender, GetTotalRow_SurfaceOfDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalRow_SurfaceOfDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalRow_SurfaceOfDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTotalRow_SourceOfDiskCompletedEventHandler(object sender, GetTotalRow_SourceOfDiskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalRow_SourceOfDiskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalRow_SourceOfDiskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceThumbnail1CompletedEventHandler(object sender, GetSourceThumbnail1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceThumbnail1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceThumbnail1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceThumbnailFlat1CompletedEventHandler(object sender, GetSourceThumbnailFlat1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceThumbnailFlat1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceThumbnailFlat1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceRawData1CompletedEventHandler(object sender, GetSourceRawData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceRawData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceRawData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDataSourcePaging1CompletedEventHandler(object sender, GetDataSourcePaging1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourcePaging1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourcePaging1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHintData1CompletedEventHandler(object sender, GetHintData1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintData1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintData1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHintDataOfDisk1CompletedEventHandler(object sender, GetHintDataOfDisk1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintDataOfDisk1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintDataOfDisk1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSurfaceByDisk1CompletedEventHandler(object sender, GetSurfaceByDisk1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSurfaceByDisk1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSurfaceByDisk1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSourceOfDiskPaging1CompletedEventHandler(object sender, GetSourceOfDiskPaging1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceOfDiskPaging1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceOfDiskPaging1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSetResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSetResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTotalRow_SurfaceOfDisk1CompletedEventHandler(object sender, GetTotalRow_SurfaceOfDisk1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalRow_SurfaceOfDisk1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalRow_SurfaceOfDisk1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetTotalRow_SourceOfDisk1CompletedEventHandler(object sender, GetTotalRow_SourceOfDisk1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalRow_SourceOfDisk1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalRow_SourceOfDisk1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591