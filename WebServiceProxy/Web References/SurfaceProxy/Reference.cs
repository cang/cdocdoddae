//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace WebServiceProxy.SurfaceProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SurfaceSoap", Namespace="http://siglaz.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Error))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Surface : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetNewSurfaceKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrevRecipeKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProcessedResultDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteNoSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProcessedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SurfaceUpdateProcessingDurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback Processed_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback Processed_DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback Results_InsertOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Surface() {
            this.Url = "http://cdo/DDAWebService/Surface.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetNewSurfaceKeyCompletedEventHandler GetNewSurfaceKeyCompleted;
        
        /// <remarks/>
        public event GetPrevRecipeKeyCompletedEventHandler GetPrevRecipeKeyCompleted;
        
        /// <remarks/>
        public event GetResultDetailCompletedEventHandler GetResultDetailCompleted;
        
        /// <remarks/>
        public event GetProcessedResultDetailCompletedEventHandler GetProcessedResultDetailCompleted;
        
        /// <remarks/>
        public event HasSignatureCompletedEventHandler HasSignatureCompleted;
        
        /// <remarks/>
        public event DeleteNoSignatureCompletedEventHandler DeleteNoSignatureCompleted;
        
        /// <remarks/>
        public event CheckProcessedCompletedEventHandler CheckProcessedCompleted;
        
        /// <remarks/>
        public event SurfaceUpdateProcessingDurationCompletedEventHandler SurfaceUpdateProcessingDurationCompleted;
        
        /// <remarks/>
        public event Processed_InsertCompletedEventHandler Processed_InsertCompleted;
        
        /// <remarks/>
        public event Processed_DeleteCompletedEventHandler Processed_DeleteCompleted;
        
        /// <remarks/>
        public event Results_InsertCompletedEventHandler Results_InsertCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetNewSurfaceKey", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetNewSurfaceKey(int recipeid, int prevrecipid, short fabkey, System.DateTime fromDate, string TestGradeList, int numbersurfaces) {
            object[] results = this.Invoke("GetNewSurfaceKey", new object[] {
                        recipeid,
                        prevrecipid,
                        fabkey,
                        fromDate,
                        TestGradeList,
                        numbersurfaces});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNewSurfaceKey(int recipeid, int prevrecipid, short fabkey, System.DateTime fromDate, string TestGradeList, int numbersurfaces, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNewSurfaceKey", new object[] {
                        recipeid,
                        prevrecipid,
                        fabkey,
                        fromDate,
                        TestGradeList,
                        numbersurfaces}, callback, asyncState);
        }
        
        /// <remarks/>
        public object[] EndGetNewSurfaceKey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNewSurfaceKeyAsync(int recipeid, int prevrecipid, short fabkey, System.DateTime fromDate, string TestGradeList, int numbersurfaces) {
            this.GetNewSurfaceKeyAsync(recipeid, prevrecipid, fabkey, fromDate, TestGradeList, numbersurfaces, null);
        }
        
        /// <remarks/>
        public void GetNewSurfaceKeyAsync(int recipeid, int prevrecipid, short fabkey, System.DateTime fromDate, string TestGradeList, int numbersurfaces, object userState) {
            if ((this.GetNewSurfaceKeyOperationCompleted == null)) {
                this.GetNewSurfaceKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewSurfaceKeyOperationCompleted);
            }
            this.InvokeAsync("GetNewSurfaceKey", new object[] {
                        recipeid,
                        prevrecipid,
                        fabkey,
                        fromDate,
                        TestGradeList,
                        numbersurfaces}, this.GetNewSurfaceKeyOperationCompleted, userState);
        }
        
        private void OnGetNewSurfaceKeyOperationCompleted(object arg) {
            if ((this.GetNewSurfaceKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewSurfaceKeyCompleted(this, new GetNewSurfaceKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetPrevRecipeKey", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultBase GetPrevRecipeKey(int recipeid) {
            object[] results = this.Invoke("GetPrevRecipeKey", new object[] {
                        recipeid});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPrevRecipeKey(int recipeid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPrevRecipeKey", new object[] {
                        recipeid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndGetPrevRecipeKey(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrevRecipeKeyAsync(int recipeid) {
            this.GetPrevRecipeKeyAsync(recipeid, null);
        }
        
        /// <remarks/>
        public void GetPrevRecipeKeyAsync(int recipeid, object userState) {
            if ((this.GetPrevRecipeKeyOperationCompleted == null)) {
                this.GetPrevRecipeKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrevRecipeKeyOperationCompleted);
            }
            this.InvokeAsync("GetPrevRecipeKey", new object[] {
                        recipeid}, this.GetPrevRecipeKeyOperationCompleted, userState);
        }
        
        private void OnGetPrevRecipeKeyOperationCompleted(object arg) {
            if ((this.GetPrevRecipeKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrevRecipeKeyCompleted(this, new GetPrevRecipeKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetResultDetail", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetResultDetail(int recipeid, long surfacekey) {
            object[] results = this.Invoke("GetResultDetail", new object[] {
                        recipeid,
                        surfacekey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetResultDetail(int recipeid, long surfacekey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetResultDetail", new object[] {
                        recipeid,
                        surfacekey}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetResultDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResultDetailAsync(int recipeid, long surfacekey) {
            this.GetResultDetailAsync(recipeid, surfacekey, null);
        }
        
        /// <remarks/>
        public void GetResultDetailAsync(int recipeid, long surfacekey, object userState) {
            if ((this.GetResultDetailOperationCompleted == null)) {
                this.GetResultDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultDetailOperationCompleted);
            }
            this.InvokeAsync("GetResultDetail", new object[] {
                        recipeid,
                        surfacekey}, this.GetResultDetailOperationCompleted, userState);
        }
        
        private void OnGetResultDetailOperationCompleted(object arg) {
            if ((this.GetResultDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultDetailCompleted(this, new GetResultDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/GetProcessedResultDetail", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetProcessedResultDetail(int recipeid, long surfacekey) {
            object[] results = this.Invoke("GetProcessedResultDetail", new object[] {
                        recipeid,
                        surfacekey});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProcessedResultDetail(int recipeid, long surfacekey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProcessedResultDetail", new object[] {
                        recipeid,
                        surfacekey}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetProcessedResultDetail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProcessedResultDetailAsync(int recipeid, long surfacekey) {
            this.GetProcessedResultDetailAsync(recipeid, surfacekey, null);
        }
        
        /// <remarks/>
        public void GetProcessedResultDetailAsync(int recipeid, long surfacekey, object userState) {
            if ((this.GetProcessedResultDetailOperationCompleted == null)) {
                this.GetProcessedResultDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProcessedResultDetailOperationCompleted);
            }
            this.InvokeAsync("GetProcessedResultDetail", new object[] {
                        recipeid,
                        surfacekey}, this.GetProcessedResultDetailOperationCompleted, userState);
        }
        
        private void OnGetProcessedResultDetailOperationCompleted(object arg) {
            if ((this.GetProcessedResultDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProcessedResultDetailCompleted(this, new GetProcessedResultDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/HasSignature", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasSignature(long surfacekey) {
            object[] results = this.Invoke("HasSignature", new object[] {
                        surfacekey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHasSignature(long surfacekey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HasSignature", new object[] {
                        surfacekey}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndHasSignature(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasSignatureAsync(long surfacekey) {
            this.HasSignatureAsync(surfacekey, null);
        }
        
        /// <remarks/>
        public void HasSignatureAsync(long surfacekey, object userState) {
            if ((this.HasSignatureOperationCompleted == null)) {
                this.HasSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasSignatureOperationCompleted);
            }
            this.InvokeAsync("HasSignature", new object[] {
                        surfacekey}, this.HasSignatureOperationCompleted, userState);
        }
        
        private void OnHasSignatureOperationCompleted(object arg) {
            if ((this.HasSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasSignatureCompleted(this, new HasSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/DeleteNoSignature", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteNoSignature(long surfacekey, int ProcessingDuration) {
            this.Invoke("DeleteNoSignature", new object[] {
                        surfacekey,
                        ProcessingDuration});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteNoSignature(long surfacekey, int ProcessingDuration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteNoSignature", new object[] {
                        surfacekey,
                        ProcessingDuration}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteNoSignature(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteNoSignatureAsync(long surfacekey, int ProcessingDuration) {
            this.DeleteNoSignatureAsync(surfacekey, ProcessingDuration, null);
        }
        
        /// <remarks/>
        public void DeleteNoSignatureAsync(long surfacekey, int ProcessingDuration, object userState) {
            if ((this.DeleteNoSignatureOperationCompleted == null)) {
                this.DeleteNoSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNoSignatureOperationCompleted);
            }
            this.InvokeAsync("DeleteNoSignature", new object[] {
                        surfacekey,
                        ProcessingDuration}, this.DeleteNoSignatureOperationCompleted, userState);
        }
        
        private void OnDeleteNoSignatureOperationCompleted(object arg) {
            if ((this.DeleteNoSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteNoSignatureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/CheckProcessed", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckProcessed(int recipekey, long surfacekey) {
            object[] results = this.Invoke("CheckProcessed", new object[] {
                        recipekey,
                        surfacekey});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckProcessed(int recipekey, long surfacekey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckProcessed", new object[] {
                        recipekey,
                        surfacekey}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckProcessed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckProcessedAsync(int recipekey, long surfacekey) {
            this.CheckProcessedAsync(recipekey, surfacekey, null);
        }
        
        /// <remarks/>
        public void CheckProcessedAsync(int recipekey, long surfacekey, object userState) {
            if ((this.CheckProcessedOperationCompleted == null)) {
                this.CheckProcessedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProcessedOperationCompleted);
            }
            this.InvokeAsync("CheckProcessed", new object[] {
                        recipekey,
                        surfacekey}, this.CheckProcessedOperationCompleted, userState);
        }
        
        private void OnCheckProcessedOperationCompleted(object arg) {
            if ((this.CheckProcessedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProcessedCompleted(this, new CheckProcessedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/SurfaceUpdateProcessingDuration", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SurfaceUpdateProcessingDuration(long surfacekey, int ProcessingDuration) {
            this.Invoke("SurfaceUpdateProcessingDuration", new object[] {
                        surfacekey,
                        ProcessingDuration});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSurfaceUpdateProcessingDuration(long surfacekey, int ProcessingDuration, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SurfaceUpdateProcessingDuration", new object[] {
                        surfacekey,
                        ProcessingDuration}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSurfaceUpdateProcessingDuration(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SurfaceUpdateProcessingDurationAsync(long surfacekey, int ProcessingDuration) {
            this.SurfaceUpdateProcessingDurationAsync(surfacekey, ProcessingDuration, null);
        }
        
        /// <remarks/>
        public void SurfaceUpdateProcessingDurationAsync(long surfacekey, int ProcessingDuration, object userState) {
            if ((this.SurfaceUpdateProcessingDurationOperationCompleted == null)) {
                this.SurfaceUpdateProcessingDurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSurfaceUpdateProcessingDurationOperationCompleted);
            }
            this.InvokeAsync("SurfaceUpdateProcessingDuration", new object[] {
                        surfacekey,
                        ProcessingDuration}, this.SurfaceUpdateProcessingDurationOperationCompleted, userState);
        }
        
        private void OnSurfaceUpdateProcessingDurationOperationCompleted(object arg) {
            if ((this.SurfaceUpdateProcessingDurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SurfaceUpdateProcessingDurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/Processed_Insert", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultBase Processed_Insert(int recipekey, long surfacekey, bool BreakWhenFound, bool finish) {
            object[] results = this.Invoke("Processed_Insert", new object[] {
                        recipekey,
                        surfacekey,
                        BreakWhenFound,
                        finish});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProcessed_Insert(int recipekey, long surfacekey, bool BreakWhenFound, bool finish, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Processed_Insert", new object[] {
                        recipekey,
                        surfacekey,
                        BreakWhenFound,
                        finish}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndProcessed_Insert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void Processed_InsertAsync(int recipekey, long surfacekey, bool BreakWhenFound, bool finish) {
            this.Processed_InsertAsync(recipekey, surfacekey, BreakWhenFound, finish, null);
        }
        
        /// <remarks/>
        public void Processed_InsertAsync(int recipekey, long surfacekey, bool BreakWhenFound, bool finish, object userState) {
            if ((this.Processed_InsertOperationCompleted == null)) {
                this.Processed_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessed_InsertOperationCompleted);
            }
            this.InvokeAsync("Processed_Insert", new object[] {
                        recipekey,
                        surfacekey,
                        BreakWhenFound,
                        finish}, this.Processed_InsertOperationCompleted, userState);
        }
        
        private void OnProcessed_InsertOperationCompleted(object arg) {
            if ((this.Processed_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Processed_InsertCompleted(this, new Processed_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/Processed_Delete", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultBase Processed_Delete(int recipekey, long surfacekey) {
            object[] results = this.Invoke("Processed_Delete", new object[] {
                        recipekey,
                        surfacekey});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProcessed_Delete(int recipekey, long surfacekey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Processed_Delete", new object[] {
                        recipekey,
                        surfacekey}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndProcessed_Delete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void Processed_DeleteAsync(int recipekey, long surfacekey) {
            this.Processed_DeleteAsync(recipekey, surfacekey, null);
        }
        
        /// <remarks/>
        public void Processed_DeleteAsync(int recipekey, long surfacekey, object userState) {
            if ((this.Processed_DeleteOperationCompleted == null)) {
                this.Processed_DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessed_DeleteOperationCompleted);
            }
            this.InvokeAsync("Processed_Delete", new object[] {
                        recipekey,
                        surfacekey}, this.Processed_DeleteOperationCompleted, userState);
        }
        
        private void OnProcessed_DeleteOperationCompleted(object arg) {
            if ((this.Processed_DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Processed_DeleteCompleted(this, new Processed_DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://siglaz.com/Results_Insert", RequestNamespace="http://siglaz.com", ResponseNamespace="http://siglaz.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultBase Results_Insert(SurfaceResult resultobj) {
            object[] results = this.Invoke("Results_Insert", new object[] {
                        resultobj});
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginResults_Insert(SurfaceResult resultobj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Results_Insert", new object[] {
                        resultobj}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultBase EndResults_Insert(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultBase)(results[0]));
        }
        
        /// <remarks/>
        public void Results_InsertAsync(SurfaceResult resultobj) {
            this.Results_InsertAsync(resultobj, null);
        }
        
        /// <remarks/>
        public void Results_InsertAsync(SurfaceResult resultobj, object userState) {
            if ((this.Results_InsertOperationCompleted == null)) {
                this.Results_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResults_InsertOperationCompleted);
            }
            this.InvokeAsync("Results_Insert", new object[] {
                        resultobj}, this.Results_InsertOperationCompleted, userState);
        }
        
        private void OnResults_InsertOperationCompleted(object arg) {
            if ((this.Results_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Results_InsertCompleted(this, new Results_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class SurfaceResult {
        
        private long resultKeyField;
        
        private int signatureKeyField;
        
        private System.DateTime analyzeTimeField;
        
        private int recipeKeyField;
        
        private long resultDetailKeyField;
        
        private long surfaceKeyField;
        
        private int numberOfDefectField;
        
        private double percentOfDefectField;
        
        private byte[] rawDataField;
        
        private byte[] sourceThumbnailField;
        
        private byte[] sourceThumbnailFlatField;
        
        private int processingDurationField;
        
        /// <remarks/>
        public long ResultKey {
            get {
                return this.resultKeyField;
            }
            set {
                this.resultKeyField = value;
            }
        }
        
        /// <remarks/>
        public int SignatureKey {
            get {
                return this.signatureKeyField;
            }
            set {
                this.signatureKeyField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AnalyzeTime {
            get {
                return this.analyzeTimeField;
            }
            set {
                this.analyzeTimeField = value;
            }
        }
        
        /// <remarks/>
        public int RecipeKey {
            get {
                return this.recipeKeyField;
            }
            set {
                this.recipeKeyField = value;
            }
        }
        
        /// <remarks/>
        public long ResultDetailKey {
            get {
                return this.resultDetailKeyField;
            }
            set {
                this.resultDetailKeyField = value;
            }
        }
        
        /// <remarks/>
        public long SurfaceKey {
            get {
                return this.surfaceKeyField;
            }
            set {
                this.surfaceKeyField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfDefect {
            get {
                return this.numberOfDefectField;
            }
            set {
                this.numberOfDefectField = value;
            }
        }
        
        /// <remarks/>
        public double PercentOfDefect {
            get {
                return this.percentOfDefectField;
            }
            set {
                this.percentOfDefectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] RawData {
            get {
                return this.rawDataField;
            }
            set {
                this.rawDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SourceThumbnail {
            get {
                return this.sourceThumbnailField;
            }
            set {
                this.sourceThumbnailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SourceThumbnailFlat {
            get {
                return this.sourceThumbnailFlatField;
            }
            set {
                this.sourceThumbnailFlatField = value;
            }
        }
        
        /// <remarks/>
        public int ProcessingDuration {
            get {
                return this.processingDurationField;
            }
            set {
                this.processingDurationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultBase))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class Error {
        
        private ErrorCode codeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public ErrorCode Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public enum ErrorCode {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        UNKNOWN_ERROR,
        
        /// <remarks/>
        NO_DATA,
        
        /// <remarks/>
        INVALID_SQL_STATEMENT,
        
        /// <remarks/>
        NO_AUTHORIZED,
        
        /// <remarks/>
        NO_DATA_TO_ANALYZE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://siglaz.com")]
    public partial class ResultBase : Error {
        
        private long id64Field;
        
        private int id32Field;
        
        private short id16Field;
        
        private string idstringField;
        
        /// <remarks/>
        public long id64 {
            get {
                return this.id64Field;
            }
            set {
                this.id64Field = value;
            }
        }
        
        /// <remarks/>
        public int id32 {
            get {
                return this.id32Field;
            }
            set {
                this.id32Field = value;
            }
        }
        
        /// <remarks/>
        public short id16 {
            get {
                return this.id16Field;
            }
            set {
                this.id16Field = value;
            }
        }
        
        /// <remarks/>
        public string idstring {
            get {
                return this.idstringField;
            }
            set {
                this.idstringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNewSurfaceKeyCompletedEventHandler(object sender, GetNewSurfaceKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewSurfaceKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewSurfaceKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetPrevRecipeKeyCompletedEventHandler(object sender, GetPrevRecipeKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrevRecipeKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrevRecipeKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetResultDetailCompletedEventHandler(object sender, GetResultDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetProcessedResultDetailCompletedEventHandler(object sender, GetProcessedResultDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProcessedResultDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProcessedResultDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void HasSignatureCompletedEventHandler(object sender, HasSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteNoSignatureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CheckProcessedCompletedEventHandler(object sender, CheckProcessedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProcessedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckProcessedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SurfaceUpdateProcessingDurationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void Processed_InsertCompletedEventHandler(object sender, Processed_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Processed_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Processed_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void Processed_DeleteCompletedEventHandler(object sender, Processed_DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Processed_DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Processed_DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void Results_InsertCompletedEventHandler(object sender, Results_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Results_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Results_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultBase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultBase)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591